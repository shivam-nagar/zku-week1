const { expect } = require("chai");
const { ethers } = require("hardhat");
const fs = require("fs");
const { groth16, plonk } = require("snarkjs");

function unstringifyBigInts(o) {
    // This function converts input strings (numeric, hex) to BigInt. 
    // If o is of type array or object, corresponding valid members/items will be casted to BigInt. 
    // returns 0 if all above type match conditions fail. 
    if ((typeof(o) == "string") && (/^[0-9]+$/.test(o) ))  {
        return BigInt(o);
    } else if ((typeof(o) == "string") && (/^0x[0-9a-fA-F]+$/.test(o) ))  {
        return BigInt(o);
    } else if (Array.isArray(o)) {
        return o.map(unstringifyBigInts);
    } else if (typeof o == "object") {
        if (o===null) return null;
        const res = {};
        const keys = Object.keys(o);
        keys.forEach( (k) => {
            res[k] = unstringifyBigInts(o[k]);
        });
        return res;
    } else {
        return o;
    }
}

describe("HelloWorld", function () {
    let Verifier;
    let verifier;

    beforeEach(async function () {
        Verifier = await ethers.getContractFactory("HelloWorldVerifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();
    });

    it("Should return true for correct proof", async function () {
        //[assignment] Add comments to explain what each line is doing


        // groth16.fullProve function generates witness file and returns proof and publicSignal.
        // fullProve function takes in 3 inputs. first, the test input object for signals.
        // second param is the wasm file and the zkey generated by contribution. 
        const { proof, publicSignals } = await groth16.fullProve({"a":"1","b":"2"}, 
            "contracts/circuits/HelloWorld/HelloWorld_js/HelloWorld.wasm",
            "contracts/circuits/HelloWorld/circuit_final.zkey");

        // Print the output signal
        console.log('1x2 =',publicSignals[0]);

        // convert signals and proof generated above from string to BigInt
        const editedPublicSignals = unstringifyBigInts(publicSignals);
        const editedProof = unstringifyBigInts(proof);

        // Generate solidity calldata to be used by HelloWorldVerifier.sol
        const calldata = await groth16.exportSolidityCallData(editedProof, editedPublicSignals);
    
        // convert the calldata itams back to string from BigInt.
        const argv = calldata.replace(/["[\]\s]/g, "").split(',').map(x => BigInt(x).toString());
    
        // Inputs for verifier
        const a = [argv[0], argv[1]];
        const b = [[argv[2], argv[3]], [argv[4], argv[5]]];
        const c = [argv[6], argv[7]];
        const Input = argv.slice(8);

        // Verify the proof and expect to be true.
        expect(await verifier.verifyProof(a, b, c, Input)).to.be.true;
    });
    it("Should return false for invalid proof", async function () {
        // Generate failure case scenario. Following calldata should fail to verify.
        let a = [0, 0];
        let b = [[0, 0], [0, 0]];
        let c = [0, 0];
        let d = [0]
        // Verify the proof which should fail for above input. 
        expect(await verifier.verifyProof(a, b, c, d)).to.be.false;
    });
});


describe("Multiplier3 with Groth16", function () {

    beforeEach(async function () {
        // Instanciate the verifier object for Multiplier3Verifier
        Verifier = await ethers.getContractFactory("Multiplier3Verifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();
    });

    it("Should return true for correct proof", async function () {
        // measuring time taken for generating proofs.
        console.time('Multiplier3 with Groth16')

        // snarkjs.groth16.fullProve for _plonkMultiplier3
        // input : a=1, b=2, c=3
        // expected output: 6
        const { proof, publicSignals } = await groth16.fullProve({"a":"1","b":"2","c":"3"}, 
            "contracts/circuits/Multiplier3/Multiplier3_js/Multiplier3.wasm",
            "contracts/circuits/Multiplier3/circuit_final.zkey");

        // Print the output signal (6)
        console.log('1x2x3 =',publicSignals[0]);

        // convert signals and proof generated above from string to BigInt
        const editedPublicSignals = unstringifyBigInts(publicSignals);
        const editedProof = unstringifyBigInts(proof);
        
        // Generate solidity calldata to be used by Multiplier3Verifier.sol
        const calldata = await groth16.exportSolidityCallData(editedProof, editedPublicSignals);
    
        // convert the calldata itams back to string from BigInt.
        const argv = calldata.replace(/["[\]\s]/g, "").split(',').map(x => BigInt(x).toString());

        // Inputs for verifier
        const a = [argv[0], argv[1]];
        const b = [[argv[2], argv[3]], [argv[4], argv[5]]];
        const c = [argv[6], argv[7]];
        const Input = argv.slice(8);
        // measuring time taken for generating proofs.
        console.timeEnd('Multiplier3 with Groth16')

        // Verify the proof which should be true for above input. 
        expect(await verifier.verifyProof(a, b, c, Input)).to.be.true;

    });
    it("Should return false for invalid proof", async function () {
        // Generate failure case scenario. Following calldata should fail to verify.
        let a = [0, 0];
        let b = [[0, 0], [0, 0]];
        let c = [0, 0];
        let d = [0]
        // Verify the proof which should fail for above input. 
        expect(await verifier.verifyProof(a, b, c, d)).to.be.false;
    });
});


describe("Multiplier3 with PLONK", function () {

    beforeEach(async function () {
        // Instanciate the verifier object for _plonkMultiplier3Verifier
        Verifier = await ethers.getContractFactory("PlonkVerifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();
    });

    it("Should return true for correct proof", async function () {
        // measuring time taken for generating proofs.
        console.time('Multiplier3 with PLONK')
        // snarkjs.plonk.fullProve for _plonkMultiplier3
        // input : a=1, b=2, c=3
        // expected output: 6
        const { proof, publicSignals } = await plonk.fullProve({"a":"1","b":"2","c":"3"}, 
            "contracts/circuits/_plonkMultiplier3/Multiplier3_js/Multiplier3.wasm",
            "contracts/circuits/_plonkMultiplier3/circuit_final.zkey");

        // Print the output signal (6)
        console.log('1x2x3 =',publicSignals[0]);

        // convert signals and proof generated above from string to BigInt
        const editedPublicSignals = unstringifyBigInts(publicSignals);
        const editedProof = unstringifyBigInts(proof);

        // Generate solidity calldata to be used by Multiplier3Verifier.sol
        const calldata = await plonk.exportSolidityCallData(editedProof, editedPublicSignals);

        // convert the calldata itams back to string from BigInt.
        const argv = calldata.replace(/["[\]\s]/g, "").split(',');

        // Inputs for verifier
        const Input = [argv[1]];

        // measuring time taken for generating proofs.
        console.timeEnd('Multiplier3 with PLONK')

        // Verify the proof which should be true for above input. 
        expect(await verifier.verifyProof(argv[0], Input)).to.be.true;
        
    });
    it("Should return false for invalid proof", async function () {
        // Generate failure case scenario. Following calldata should fail to verify.
        let a = 0;
        let Input = [0];
        // Verify the proof which should fail for above input. 
        expect(await verifier.verifyProof(a, Input)).to.be.false;
    });
})